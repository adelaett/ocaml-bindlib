cst \ 1 Prefix 0.0;

red (\x.T[x]) U[] -> T[U[]];
red \x.U[] x -> U[];

let n0 = \f.\x.x;
let S = \n.\f.\x.f (n f x);
let n1 = S n0;
let n2 = S n1;
let n3 = S n2;
let n4 = S n3;
let n5 = S n4;
let n6 = S n5;
let n7 = S n6;
let n8 = S n7;
let n9 = S n8;
let n10 = S n9;
let add = \n. \m. \f. \x.n f (m f x);
let mul = \n. \m. \f.n (m f);
let n20 = add n10 n10;
let n30 = add n20 n10;
let n40 = add n30 n10;
let n100 = mul n10 n10;

let pred = \n.n
	(\p. \x. \y.p (S x) x)
	(\x. \y.y) n0 n0;

n10;
n10 pred n10;

cst $ Atom;
cst :: 2 RInfix 6.0;
cst @ 2 RInfix 5.0;

red $ @ U[] -> U[];
red (X[]::L[]) @ M[] -> X[]::(L[] @ M[]);

n0::n1:: $ @ $;

cst map Atom;
red map f[] $ -> $;
red map f[] (X[]::L[]) -> (f[] X[])::(map f[] L[]);

\f.map f (n0::n1:: $);

cst B Atom;
cst M Atom;
cst C Atom;
cst <- 2 LInfix 5.0;
cst E Atom;

red B X[] (M Y[]) -> M (Y[] <- X[]);
red B (M Y[]) X[] -> M (Y[] <- X[]);
red (B X[] Y[]) <- Z[] -> B (X[] <- Z[]) (Y[] <- Z[]);
red (M X[]) <- Z[] -> M (X[] <- Z[]);
red (C X[]) <- Z[] -> C (B Z[] (X[] <- Z[]));
red E <- Z[] -> E;

let A1 = M (B (C E) (C E));
let A2 = M (B A1 A1);
let A3 = M (B A2 A2);
A2;